app waspresso {
  wasp: {
    version: "^0.10.5"
  },
  title: "waspresso",

  auth: {
    // Expects entity User to have (username:String) and (password:String) fields.
    userEntity: User,
    methods: {
      // We also support Google and GitHub, with more on the way!
      usernameAndPassword: {},
    },
    // We'll see how this is used a bit later
    onAuthFailedRedirectTo: "/login"
  }
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import Main from "@client/MainPage.tsx"
}

entity Beverage {=psl
  id Int @id @default(autoincrement())
  name String
  imageUrl String
  cost Float
  Order Order[]
psl=}

entity Order {=psl
  id Int @id @default(autoincrement())
  beverageId Int
  beverage Beverage @relation(fields: [beverageId], references: [id])
  customerId String
  totalCost Float
psl=}

query Catalog {
  fn: import { getCatalog } from "@server/catalog.js",
  entities: [Beverage]
}

action PlaceOrder {
  fn: import { placeOrder } from "@server/order.js",
  entities: [Beverage, Order]
}

entity User {=psl
    id          Int     @id @default(autoincrement())
    username    String  @unique
    password    String
psl=}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/SignupPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/LoginPage"
}

route OrdersRoute { path: "/orders", to: OrdersPage }
page OrdersPage {
  authRequired: true,
  component: import Orders from "@client/OrdersPage"
}

query Orders {
  fn: import { getOrders } from "@server/order.js",
  entities: [Order]
}